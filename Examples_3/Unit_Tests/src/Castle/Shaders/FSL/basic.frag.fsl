/*
 * Copyright (c) 2017-2024 The Forge Interactive Inc.
 * 
 * This file is part of The-Forge
 * (see https://github.com/ConfettiFX/The-Forge).
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
*/

// Shader for simple shading with a point light
// for planets in Unit Test 12 - Transformations

#include "resourcesCastle.h.fsl"

STRUCT(VSOutput)
{
	DATA(float4, Position, SV_Position);
    DATA(float3, lightPosition, none);
    DATA(float3, Normal, NORMAL);
	DATA(float4, Color,    COLOR);
	DATA(float3, TexCoord, TEXCOORD);
    DATA(float3, WorldPosition, TEXCOORD2);
};

float4 PS_MAIN( VSOutput In )
{
    INIT_MAIN;

    float3 lightPos = Get(lightPosition);
    float3 Normal = normalize(In.Normal);
    float lightIntensity = saturate(dot(float3(0.0, 1.0, 0.0), Normal));

    float3 LightVectorWorldSpace = normalize(Get(lightPosition) - In.WorldPosition);
    float diffuselightIntensity = saturate(dot(LightVectorWorldSpace, In.Normal));

    float ambientLightIntesity = 0.2;
    float lighIntensity = 0.8;

    int texIndex = int(round(In.TexCoord.z));

    float4 sampledColor = float4(0.0, 0.0, 0.0, 1.0); 
    float4 sampledBump = float4(0.0, 0.0, 0.0, 1.0); 

    if(texIndex == 0)
    {
        sampledColor = SampleTex2D(Interior, Get(uSampler0), In.TexCoord.xy);
        sampledBump = SampleTex2D(InteriorBump, Get(uSampler0), In.TexCoord.xy);
    }
    else if(texIndex == 1)
    {
        sampledColor = SampleTex2D(Fountain, Get(uSampler0), In.TexCoord.xy);
        sampledBump = SampleTex2D(FountainBump, Get(uSampler0), In.TexCoord.xy);
    }
    else if(texIndex == 2)
    {
        sampledColor = SampleTex2D(Fountain, Get(uSampler0), In.TexCoord.xy);
        sampledBump = SampleTex2D(FountainBump, Get(uSampler0), In.TexCoord.xy);
    }
    else if(texIndex == 3)
    {
        sampledColor = SampleTex2D(Exterior, Get(uSampler0), In.TexCoord.xy);
        sampledBump = SampleTex2D(ExteriorBump, Get(uSampler0), In.TexCoord.xy);
    }

    //float4 sampledColor = SampleTex2D(colorTex, Get(uSampler0), In.TexCoord.xy);

    RETURN((sampledColor + (0.1 * sampledBump)) * saturate(lighIntensity * diffuselightIntensity + ambientLightIntesity));
}
